- name: Get cloud configuration
  tags: bootstrap
  os_client_config:

- name: Create OpenStack instance
  os_server:
    security_groups: "sg-{{ name }}-master"
    name: "{{ name }}-master"
    image: "{{ lookup('env','IMAGE') | default('xenial-server-cloudimg-amd64', true) }}"
    boot_from_volume: "{{ lookup('env', 'MASTER_BOOT_FROM_VOLUME') | default('True', true) }}"
    terminate_volume: "{{ lookup('env', 'MASTER_TERMINATE_VOLUME') | default('True', true) }}"
    volume_size: "{{ lookup('env', 'MASTER_VOLUME_SIZE') | default('64', true) }}"
    key_name: "{{ lookup('env','KEY') }}"
    flavor_ram: "{{ lookup('env','MASTER_MEMORY') | default('4096', true) }}"
    nics:
      - net-name: "{{ lookup('env', 'NETWORK') | default('k8s', true) }}"
    floating_ip_pools: "{{ lookup('env', 'FLOATING_IP_POOL') | default(omit, true) }}"
    userdata: |
      #cloud-config
      apt:
        {{ lookup('env', 'CLOUD_INIT_APT_EXTRA_CONFIG') | default('', true) }} # e.g. http_proxy: http://[[user][:pass]@]host[:port]/
      package_upgrade: true
      hostname: "{{ name }}-master"
      manage_etc_hosts: false
      packages:
        - python
        - python-simplejson
  when: state == "present"
  register: "instance"

- name: Delete OpenStack instances
  os_server:
    name: "{{ name }}-master"
    state: absent
  when: state == "absent"

- name: Update inventory
  add_host:
    name: "{{ instance.server.name }}"
    ansible_ssh_host: "{{ instance.openstack.accessIPv4 }}"
    ansible_ssh_user: ubuntu
    groupname: master
    routeruuid: "{{ routeruuid }}"
    subnetuuid: "{{ subnetuuid }}"
  when: state == "present"

- name: Wait during instances boot
  tags: bootstrap
  wait_for:
    host: "{{ instance.openstack.accessIPv4 }}"
    port: 22
    search_regex: OpenSSH
  when: state == "present"

- name: Allow SSH keys on first connection
  shell: "ssh-keyscan {{ instance.openstack.accessIPv4 }} >> ~/.ssh/known_hosts"
  when: state == "present"
